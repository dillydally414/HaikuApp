{"version":3,"sources":["src/functions/remove-blacklisted.ts","src/components/Line.tsx","src/components/Haiku.tsx","src/pages/Home.tsx","App.tsx"],"names":["typedBadWords","badWords","filter","Filter","placeHolder","addWords","removeBlacklisted","text","newText","split","word","isProfane","toLowerCase","join","StyledLine","styled","TextInput","Line","React","forwardRef","ref","placeholder","returnKeyType","syllableGoal","onSubmit","useState","setText","focused","setFocused","syllables","setSyllables","useEffect","syllable","onChangeText","endsWith","defaultValue","placeholderTextColor","autoCapitalize","onFocus","onBlur","style","borderBottomColor","onSubmitEditing","Text","color","HaikuView","View","Haiku","ref1","useRef","ref2","ref3","current","focus","blur","ScrollContainer","ScrollView","Container","Title","Home","navigation","scrollEnabled","StatusBar","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","Screen","name","component","options","headerShown"],"mappings":"gXAGMA,EAAa,IAAOC,GACpBC,EAAS,IAAIC,IAAO,CAAEC,YAAa,KACzCF,EAAOG,SAAP,MAAAH,EAAM,IAAaF,IAEnB,I,UAMeM,EANW,SAACC,GACzB,IAAIC,EAAyBD,EAAKE,MAAM,KAExC,OADAD,EAAUA,EAAQN,QAAO,SAACQ,GAAD,OAAoBR,EAAOS,UAAUD,EAAKE,mBACpDC,KAAK,M,QCFhBC,EAAaC,YAAOC,IAAPD,CAAH,2HAiEDE,EAzDFC,IAAMC,YAAW,WAU3BC,GAAkC,IATnCC,EASkC,EATlCA,YASkC,IARlCC,qBAQkC,MARlB,OAQkB,EAPlCC,EAOkC,EAPlCA,aAOkC,IANlCC,gBAMkC,MANvB,aAMuB,EAClC,EAAwBC,mBAAS,IAAjC,WAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,oBAAS,GAAvC,WAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAkCH,mBAAS,GAA3C,WAAOI,EAAP,KAAkBC,EAAlB,KAUA,OARAC,qBAAU,WACRD,EAAaE,YAASzB,MACrB,CAACA,IAEJwB,qBAAU,WACRL,EAAQpB,EAAkBC,MACzB,CAACoB,IAGF,qCACE,cAACb,EAAD,CACEO,YAAgBA,EAAL,KAAqBE,EAArB,cACXU,aAAc,SAAC1B,GAAD,OAAkBmB,EAAQnB,EAAK2B,SAAS,KAAO5B,EAAkBC,GAAQA,IACvF4B,aAAc5B,EACd6B,qBAvCe,UAwCfd,cAAeA,EACfe,eAAe,OACfC,QAAS,kBAAMV,GAAW,IAC1BW,OAAQ,kBAAMX,GAAW,IACzBY,MAAO,CACLC,kBAAmBd,EAAU,OA7ChB,WA+Cfe,gBAAiB,kBAAMlB,KACvBJ,IAAKA,IAEP,cAACuB,EAAA,EAAD,CACEH,MAAO,CACLI,MAAOrB,EAAeM,EAAY,EAAI,QAAUN,IAAiBM,EAAY,QAAU,OAF3F,SAKGN,EAAeM,EAAY,EACvBN,EAAeM,EADnB,kBAC6CN,EAAeM,EAAY,EAAI,IAAM,IADlF,IAEIN,IAAiBM,EACpB,6BAEGA,EAAYN,EAHZ,aAGoCM,EAAYN,EAAe,EAAI,IAAM,IAHzE,iBC1DPsB,EAAY9B,YAAO+B,IAAP/B,CAAH,wGAsCAgC,EA/BD,WACZ,IAAMC,EAAOC,iBAAkB,MACzBC,EAAOD,iBAAkB,MACzBE,EAAOF,iBAAkB,MAE/B,OACE,eAACJ,EAAD,WACE,cAAC,EAAD,CACExB,YAAY,uBACZE,aAAc,EACdC,SAAU,iCAAM0B,EAAKE,cAAX,EAAM,EAAcC,SAC9BjC,IAAK4B,IAEP,cAAC,EAAD,CACE3B,YAAY,wBACZE,aAAc,EACdC,SAAU,iCAAM2B,EAAKC,cAAX,EAAM,EAAcC,SAC9BjC,IAAK8B,IAGP,cAAC,EAAD,CACE7B,YAAY,uBACZE,aAAc,EACdD,cAAc,OACdE,SAAU,iCAAM2B,EAAKC,cAAX,EAAM,EAAcE,QAC9BlC,IAAK+B,QC7BPI,EAAkBxC,YAAOyC,IAAPzC,CAAH,kGAOf0C,EAAY1C,YAAO+B,IAAP/B,CAAH,+HAQT2C,EAAQ3C,YAAO4B,IAAP5B,CAAH,+DAsBI4C,EAjBF,SAAC,GAGK,EAFjBC,WAGA,OACE,cAACL,EAAD,CAAiBM,eAAe,EAAhC,SACE,eAACJ,EAAD,WACE,cAACC,EAAD,0BAGA,cAACI,EAAA,EAAD,CAAWtB,MAAM,SACjB,cAAC,EAAD,U,SCjCFuB,EAAQC,cAEC,SAASC,IACtB,OACE,cAACC,EAAA,EAAD,UACE,cAACH,EAAMI,UAAP,UACE,cAACJ,EAAMK,OAAP,CACEC,KAAK,OACLC,UAAWX,EACXY,QAAS,CACPC,aAAa,W","file":"static/js/app.07d64614.chunk.js","sourcesContent":["import Filter from 'bad-words';\nimport badWords from '../constants/bad-words.json';\n\nconst typedBadWords = [...badWords] as string[]\nconst filter = new Filter({ placeHolder: '' });\nfilter.addWords(...typedBadWords)\n\nconst removeBlacklisted = (text: string): string => {\n  let newText: Array<string> = text.split(' ');\n  newText = newText.filter((word: string) => (!filter.isProfane(word.toLowerCase())));\n  return newText.join(' ');\n};\n\nexport default removeBlacklisted;","import styled from 'styled-components/native';\nimport React, { ForwardedRef, useEffect, useState } from 'react';\nimport { Text, TextInput } from 'react-native';\nimport { syllable } from 'syllable';\nimport removeBlacklisted from '../functions/remove-blacklisted';\n\nconst secondaryColor = '#D3D3D3';\n\nconst StyledLine = styled(TextInput)`\n  border-bottom-width: 1px;\n  height: 15%;\n  margin-top: 3%;\n  padding-left: 0.5%;\n  width: 100%;\n`;\n\nconst Line = React.forwardRef(({\n  placeholder,\n  returnKeyType = 'next',\n  syllableGoal,\n  onSubmit = () => { },\n}: {\n  placeholder: string,\n  returnKeyType?: 'next' | 'done',\n  syllableGoal: number,\n  onSubmit?: Function,\n}, ref: ForwardedRef<TextInput>) => {\n  const [text, setText] = useState('');\n  const [focused, setFocused] = useState(false);\n  const [syllables, setSyllables] = useState(0);\n\n  useEffect(() => {\n    setSyllables(syllable(text));\n  }, [text]);\n\n  useEffect(() => {\n    setText(removeBlacklisted(text));\n  }, [focused])\n\n  return (\n    <>\n      <StyledLine\n        placeholder={`${placeholder} (${syllableGoal} syllables)`}\n        onChangeText={(text: string) => setText(text.endsWith(' ') ? removeBlacklisted(text) : text)}\n        defaultValue={text}\n        placeholderTextColor={secondaryColor}\n        returnKeyType={returnKeyType}\n        autoCapitalize='none'\n        onFocus={() => setFocused(true)}\n        onBlur={() => setFocused(false)}\n        style={{\n          borderBottomColor: focused ? 'blue' : secondaryColor,\n        }}\n        onSubmitEditing={() => onSubmit()}\n        ref={ref}\n      />\n      <Text\n        style={{\n          color: syllableGoal - syllables > 0 ? 'black' : syllableGoal === syllables ? 'green' : 'red'\n        }}\n      >\n        {syllableGoal - syllables > 0 ? (\n          `${syllableGoal - syllables} more syllable${syllableGoal - syllables > 1 ? 's' : ''}.`\n        ) : (syllableGoal === syllables ? (\n          'Right number of syllables!'\n        ) : (\n          `${syllables - syllableGoal} syllable${syllables - syllableGoal > 1 ? 's' : ''} over.`\n        ))}\n      </Text>\n    </>\n  );\n});\n\nexport default Line;","import styled from 'styled-components/native';\nimport { TextInput, View } from 'react-native';\nimport React, { ReactElement, useEffect, useRef } from 'react';\nimport Line from './Line';\n\nconst HaikuView = styled(View)`\n  display: flex;\n  height: 30%;\n  justify-content: space-between;\n  width: 80%;\n`;\n\nconst Haiku = (): ReactElement => {\n  const ref1 = useRef<TextInput>(null);\n  const ref2 = useRef<TextInput>(null);\n  const ref3 = useRef<TextInput>(null);\n\n  return (\n    <HaikuView>\n      <Line\n        placeholder='First line goes here'\n        syllableGoal={5}\n        onSubmit={() => ref2.current?.focus()}\n        ref={ref1}\n      />\n      <Line\n        placeholder='Second line goes here'\n        syllableGoal={7}\n        onSubmit={() => ref3.current?.focus()}\n        ref={ref2}\n\n      />\n      <Line\n        placeholder='Third line goes here'\n        syllableGoal={5}\n        returnKeyType='done'\n        onSubmit={() => ref3.current?.blur()}\n        ref={ref3}\n      />\n    </HaikuView>\n  )\n}\n\nexport default Haiku;","import { StatusBar } from 'expo-status-bar';\nimport styled from 'styled-components/native';\nimport { ScrollView, Text, View } from 'react-native';\nimport Haiku from '../components/Haiku';\nimport React, { ReactElement } from 'react';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../types';\n\nconst ScrollContainer = styled(ScrollView)`\n  background-color: #fff;\n  display: flex;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Container = styled(View)`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  width: 100%;\n`;\n\nconst Title = styled(Text)`\n  font-size: 30px;\n  padding: 25% 0 20%;\n`;\n\nconst Home = ({\n  navigation,\n}: NativeStackScreenProps<RootStackParamList, 'Home'>\n): ReactElement => {\n  return (\n    <ScrollContainer scrollEnabled={false}>\n      <Container>\n        <Title>\n          Haiku Buddy\n        </Title>\n        <StatusBar style=\"auto\" />\n        <Haiku />\n      </Container>\n    </ScrollContainer>\n  );\n};\n\nexport default Home;","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Home from \"./src/pages/Home\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { RootStackParamList } from \"./src/types\";\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{\n            headerShown: false,\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}"],"sourceRoot":""}