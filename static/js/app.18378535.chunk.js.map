{"version":3,"sources":["src/functions/remove-blacklisted.ts","src/components/Line.tsx","src/components/Haiku.tsx","src/pages/Home.tsx","src/pages/Finished.tsx","App.tsx"],"names":["typedBadWords","badWords","filter","Filter","placeHolder","addWords","removeBlacklisted","text","newText","split","word","isProfane","toLowerCase","join","StyledLine","styled","TextInput","StyledSubLine","Text","Line","React","forwardRef","ref","placeholder","returnKeyType","syllableGoal","onSubmit","lineProps","setText","setComplete","useState","focused","setFocused","syllables","setSyllables","useEffect","syllable","onChangeText","endsWith","defaultValue","placeholderTextColor","autoCapitalize","onFocus","onBlur","style","borderBottomColor","onSubmitEditing","color","HaikuView","View","Haiku","lines","ref1","useRef","ref2","ref3","current","focus","blur","ScrollContainer","ScrollView","Container","Title","FinishedButtonContainer","Home","navigation","setLines","complete","scrollEnabled","StatusBar","map","line","index","slice","newComplete","reduce","prev","Button","title","onPress","navigate","haiku","StyledView","StyledHaikuLine","ClipboardButton","Pressable","ClipboardText","CopiedText","Finished","route","params","copied","setCopied","press","setPress","currentTimeout","setCurrentTimeout","clearTimeout","timeout","setTimeout","undefined","props","opacity","pressed","Clipboard","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","Screen","name","component","options","headerShown","headerTitle"],"mappings":"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","file":"static/js/app.18378535.chunk.js","sourcesContent":["import Filter from 'bad-words';\nimport badWords from '../constants/bad-words.json';\n\nconst typedBadWords = [...badWords] as string[]\nconst filter = new Filter({ placeHolder: '' });\nfilter.addWords(...typedBadWords)\n\nconst removeBlacklisted = (text: string): string => {\n  let newText: Array<string> = text.split(' ');\n  newText = newText.filter((word: string) => (!filter.isProfane(word.toLowerCase())));\n  return newText.join(' ');\n};\n\nexport default removeBlacklisted;","import styled from 'styled-components/native';\nimport React, { ForwardedRef, useEffect, useState } from 'react';\nimport { Text, TextInput } from 'react-native';\nimport { syllable } from 'syllable';\nimport removeBlacklisted from '../functions/remove-blacklisted';\n\nconst secondaryColor = '#D3D3D3';\n\nconst StyledLine = styled(TextInput)`\n  align-self: center;\n  border-bottom-width: 1px;\n  display: flex;\n  margin-top: 5%;\n  padding-left: 0.5%;\n  width: 100%;\n`;\n\nconst StyledSubLine = styled(Text)`\n  display: flex;\n`;\n\nconst Line = React.forwardRef(({\n  placeholder,\n  returnKeyType = 'next',\n  syllableGoal,\n  onSubmit = () => { },\n  lineProps: {\n    text,\n    setText,\n    setComplete\n  }\n}: {\n  placeholder: string,\n  returnKeyType?: 'next' | 'done',\n  syllableGoal: number,\n  onSubmit?: Function,\n  lineProps: {\n    text: string,\n    setText: (newText: string) => void,\n    setComplete: (newComplete: boolean) => void\n  }\n}, ref: ForwardedRef<TextInput>) => {\n  const [focused, setFocused] = useState(false);\n  const [syllables, setSyllables] = useState(0);\n\n  useEffect(() => {\n    setComplete(syllables === syllableGoal)\n  }, [syllables])\n\n  useEffect(() => {\n    setSyllables(syllable(text));\n  }, [text]);\n\n  useEffect(() => {\n    setText(removeBlacklisted(text));\n  }, [focused])\n\n  return (\n    <>\n      <StyledLine\n        placeholder={`${placeholder} (${syllableGoal} syllables)`}\n        onChangeText={(text: string) => setText(text.endsWith(' ') ? removeBlacklisted(text) : text)}\n        defaultValue={text}\n        placeholderTextColor={secondaryColor}\n        returnKeyType={returnKeyType}\n        autoCapitalize='none'\n        onFocus={() => setFocused(true)}\n        onBlur={() => setFocused(false)}\n        style={{\n          borderBottomColor: focused ? 'blue' : secondaryColor,\n        }}\n        onSubmitEditing={() => onSubmit()}\n        ref={ref}\n      />\n      <StyledSubLine\n        style={{\n          color: syllableGoal - syllables > 0 ? 'black' : syllableGoal === syllables ? 'green' : 'red'\n        }}\n      >\n        {syllableGoal - syllables > 0 ? (\n          `${syllableGoal - syllables} more syllable${syllableGoal - syllables > 1 ? 's' : ''}.`\n        ) : (syllableGoal === syllables ? (\n          'Right number of syllables!'\n        ) : (\n          `${syllables - syllableGoal} syllable${syllables - syllableGoal > 1 ? 's' : ''} over.`\n        ))}\n      </StyledSubLine>\n    </>\n  );\n});\n\nexport default Line;","import styled from 'styled-components/native';\nimport { TextInput, View } from 'react-native';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport Line from './Line';\n\nconst HaikuView = styled(View)`\n  align-self: center;\n  display: flex;\n  justify-content: space-between;\n  width: 80%;\n`;\n\nconst Haiku = ({\n  lines,\n}: {\n  lines: {\n    text: string,\n    setText: (newText: string) => void\n    setComplete: (newComplete: boolean) => void\n  }[],\n}): ReactElement => {\n  const ref1 = useRef<TextInput>(null);\n  const ref2 = useRef<TextInput>(null);\n  const ref3 = useRef<TextInput>(null);\n\n  return (\n    <HaikuView>\n      <Line\n        placeholder='First line goes here'\n        syllableGoal={5}\n        onSubmit={() => ref2.current?.focus()}\n        ref={ref1}\n        lineProps={lines[0]}\n      />\n      <Line\n        placeholder='Second line goes here'\n        syllableGoal={7}\n        onSubmit={() => ref3.current?.focus()}\n        ref={ref2}\n        lineProps={lines[1]}\n      />\n      <Line\n        placeholder='Third line goes here'\n        syllableGoal={5}\n        returnKeyType='done'\n        onSubmit={() => ref3.current?.blur()}\n        ref={ref3}\n        lineProps={lines[2]}\n      />\n    </HaikuView>\n  )\n}\n\nexport default Haiku;","import { StatusBar } from 'expo-status-bar';\nimport styled from 'styled-components/native';\nimport { Button, ScrollView, Text, View } from 'react-native';\nimport Haiku from '../components/Haiku';\nimport React, { ReactElement, useState } from 'react';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../types';\n\nconst ScrollContainer = styled(ScrollView)`\n  background-color: #fff;\n  display: flex;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Container = styled(View)`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Title = styled(Text)`\n  font-size: 30px;\n  padding: 25% 0 20%;\n`;\n\nconst FinishedButtonContainer = styled(View)`\n  display: flex;\n  height: 50%;\n  justify-content: center;\n`;\n\nconst Home = ({\n  navigation,\n}: NativeStackScreenProps<RootStackParamList, 'Home'>\n): ReactElement => {\n  const [lines, setLines] = useState(['', '', '']);\n  const [complete, setComplete] = useState([false, false, false]);\n\n  return (\n    <ScrollContainer scrollEnabled={false}>\n      <Container>\n        <Title>\n          Haiku Buddy\n        </Title>\n        <StatusBar style=\"auto\" />\n        <Haiku\n          lines={lines.map((line: string, index: number) => {\n            return {\n              text: line,\n              setText: (newText: string) => setLines([...lines.slice(0, index), newText, ...lines.slice(index + 1)]),\n              setComplete: (newComplete: boolean) => setComplete([...complete.slice(0, index), newComplete, ...complete.slice(index + 1)])\n            }\n          })}\n        />\n        {complete.reduce((prev: boolean, current: boolean) => prev && current, true) &&\n          <FinishedButtonContainer>\n            <Button\n              title=\"Finished!\"\n              onPress={() => navigation.navigate('Finished', { haiku: lines })}\n            />\n          </FinishedButtonContainer>\n        }\n      </Container>\n    </ScrollContainer>\n  );\n};\n\nexport default Home;","import { RootStackParamList } from \"../types\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { ReactElement } from \"react\";\nimport { Image, Modal, Pressable, ScrollView, Text, View } from \"react-native\";\nimport * as Clipboard from 'expo-clipboard';\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledView = styled(View)`\n  align-items: center;\n  display: flex;\n  padding: 20%\n`;\n\nconst StyledHaikuLine = styled(Text)`\n  font-size: 20px;\n  margin: 1.5%;\n`;\n\nconst ClipboardButton = styled(Pressable)`\n  margin-top: 50%;\n;`\n\nconst ClipboardText = styled(Text)`\n  color: blue;\n  text-decoration: underline blue;\n`;\n\nconst CopiedText = styled(Text)`\n  font-size: 10px;\n`;\n\nconst Finished = ({\n  navigation,\n  route: { params: { haiku } }\n}: NativeStackScreenProps<RootStackParamList, 'Finished'>\n): ReactElement => {\n  const [copied, setCopied] = useState(false);\n  const [press, setPress] = useState(0);\n  const [currentTimeout, setCurrentTimeout] = useState<NodeJS.Timeout>();\n\n  useEffect(() => {\n    if (copied) {\n      if (currentTimeout) clearTimeout(currentTimeout)\n      const timeout = setTimeout(() => setCopied(false), 1000)\n      setCurrentTimeout(timeout)\n      return () => {\n        clearTimeout(timeout)\n        setCurrentTimeout(undefined)\n      }\n    }\n  }, [press])\n\n  return (\n    <ScrollView>\n      <StyledView>\n        {haiku.map((line: string, index: number) => {\n          return (\n            <StyledHaikuLine key={line + index}>\n              {line}\n            </StyledHaikuLine>\n          );\n        })}\n        <ClipboardButton\n          style={(props: { pressed: boolean }) => {\n            return [\n              {\n                opacity: props.pressed ? 0.5 : 1\n              }\n            ]\n          }}\n          onPress={() => {\n            Clipboard.setString(haiku.join('\\n'))\n            setCopied(true)\n            setPress(press + 1)\n          }}\n        >\n          <ClipboardText>Copy to Clipboard!</ClipboardText>\n        </ClipboardButton>\n        {copied &&\n          <CopiedText>\n            Copied!\n          </CopiedText>\n        }\n      </StyledView >\n    </ScrollView >\n  );\n};\n\nexport default Finished;","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Home, Finished } from \"./src/pages\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { RootStackParamList } from \"./src/types\";\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{\n            headerShown: false,\n          }}\n        />\n        <Stack.Screen\n          name=\"Finished\"\n          component={Finished}\n          options={{\n            headerTitle: ''\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}"],"sourceRoot":""}